{"version":3,"sources":["components/welcome/Welcome.js","components/clock/Clock.js","components/contact/Contact.js","components/no-match/NoMatch.js","components/navigation/Navigation.js","jeopardyService.js","components/display/Display.js","components/jeopardy/Jeopardy.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","props","className","name","Clock","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","React","Component","Contact","handleChange","event","formData","target","value","handleSubmit","preventDefault","submitted","resetForm","firstName","lastName","onClick","onSubmit","htmlFor","type","onChange","NoMatch","Navigation","to","JeopardyService","url","client","axios","create","get","Display","category","question","score","input","Jeopardy","toLowerCase","data","answer","getNewQuestion","id","airdate","created_at","updated_at","category_id","game_id","invalid_count","title","clues_count","getQuestion","then","result","console","log","App","exact","path","render","match","params","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8ee7d3ef.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Welcome(props) {\r\n  return <div className=\"Welcome\">Welcome, {props.name}!</div>;\r\n}\r\nexport default Welcome;\r\n","import React from \"react\";\r\nclass Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      date: new Date(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(() => this.tick(), 1000);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date(),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Clock\">\r\n        <h2>It is now {this.state.date.toLocaleTimeString()}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Clock;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Contact extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      submitted: false,\r\n      formData: {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const formData = { ...this.state.formData };\r\n    formData[event.target.name] = event.target.value;\r\n\r\n    this.setState({ formData });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    this.setState({\r\n      submitted: true,\r\n    });\r\n  };\r\n\r\n  resetForm = (event) => {\r\n    this.setState({\r\n      submitted: false,\r\n      formData: {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.submitted) {\r\n      return (\r\n        <div className=\"Contact\">\r\n          <p>\r\n            Thank you, {this.state.formData.firstName}, for submitting the form.\r\n          </p>\r\n          <button onClick={this.resetForm}>Reset Form</button>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"Contact\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div>\r\n            <label htmlFor=\"\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"firstName\"\r\n              value={this.state.formData.firstName}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"lastName\"\r\n              value={this.state.formData.lastName}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <button>Submit Form</button>\r\n        </form>\r\n        <div>\r\n          {this.state.formData.firstName}\r\n          <br />\r\n          {this.state.formData.lastName}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import React from \"react\";\r\n\r\nfunction NoMatch(props) {\r\n  return (\r\n    <div>\r\n      <div>Error 404</div>\r\n      <br />\r\n      <div>No match was found for the specified URL</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NoMatch;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Navigation(props) {\r\n  return (\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/\">Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/clock\">Clock</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/contact\">Contact</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/jeopardy\">Jeopardy</Link>\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\nexport default Navigation;\r\n","import axios from \"axios\";\r\nclass JeopardyService {\r\n  constructor(url = \"http://jservice.io/api/random\", client = axios.create()) {\r\n    this.url = url;\r\n    this.client = client;\r\n  }\r\n\r\n  getQuestion() {\r\n    return this.client.get(this.url);\r\n  }\r\n}\r\nexport default JeopardyService;\r\n","import React from \"react\";\r\n\r\nfunction Display(props) {\r\n  return (\r\n    <div>\r\n      <p>\r\n        <strong>Category: {props.category}</strong>\r\n      </p>\r\n      <p>\r\n        <strong>Points: {props.value}</strong>\r\n      </p>\r\n      <p>\r\n        <strong>Question: {props.question}</strong>\r\n      </p>\r\n      <p>\r\n        <strong>Score: {props.score}</strong>\r\n      </p>\r\n      <form onSubmit={props.handleSubmit}>\r\n        <label>\r\n          What is your answer?\r\n          <input\r\n            type=\"text\"\r\n            value={props.input}\r\n            onChange={props.handleChange}\r\n          />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import React, { Component } from \"react\";\r\n//import jeopardy service\r\nimport JeopardyService from \"../../jeopardyService\";\r\nimport Display from \"../display/Display\";\r\nclass Jeopardy extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.client = new JeopardyService();\r\n    this.state = {\r\n      data: {\r\n        id: null,\r\n        answer: \"\",\r\n        question: \"\",\r\n        value: null,\r\n        airdate: \"\",\r\n        created_at: \"\",\r\n        updated_at: \"\",\r\n        category_id: null,\r\n        game_id: null,\r\n        invalid_count: null,\r\n        category: {\r\n          id: null,\r\n          title: \"\",\r\n          created_at: \"\",\r\n          updated_at: \"\",\r\n          clues_count: null,\r\n        },\r\n      },\r\n      score: 0,\r\n      value: \"\",\r\n    };\r\n  }\r\n  //get a new random generated question from API\r\n  getNewQuestion() {\r\n    return this.client.getQuestion().then((result) => {\r\n      this.setState({\r\n        data: result.data[0],\r\n      });\r\n    });\r\n  }\r\n  //when the component mounts, get the question\r\n  componentDidMount() {\r\n    this.getNewQuestion();\r\n  }\r\n  //handle user input\r\n  handleChange = (event) => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n\r\n  //Check if answer is correct and get new question\r\n  handleSubmit = (event) => {\r\n    if (\r\n      this.state.value.toLowerCase() === this.state.data.answer.toLowerCase()\r\n    ) {\r\n      this.setState({ score: this.state.score + this.state.data.value });\r\n    } else {\r\n      this.setState({ score: this.state.score - this.state.data.value });\r\n    }\r\n    this.setState({ value: \"\" });\r\n    this.getNewQuestion();\r\n\r\n    event.preventDefault();\r\n  };\r\n\r\n  //display the result\r\n  render() {\r\n    console.log(this.state.data.answer);\r\n    return (\r\n      <div>\r\n        <Display\r\n          category={this.state.data.category.title}\r\n          value={this.state.data.value}\r\n          question={this.state.data.question}\r\n          score={this.state.score}\r\n          input={this.state.value}\r\n          handleChange={this.handleChange}\r\n          handleSubmit={this.handleSubmit}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Jeopardy;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Welcome from \"./components/welcome/Welcome\";\nimport Clock from \"./components/clock/Clock\";\nimport Contact from \"./components/contact/Contact\";\nimport NoMatch from \"./components/no-match/NoMatch\";\nimport Navigation from \"./components/navigation/Navigation\";\nimport Jeopardy from \"./components/jeopardy/Jeopardy\";\nimport { Route, Switch } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"Navigation\">\n        <Navigation />\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={(props) => <Welcome {...props} name=\"Chase\" />}\n          />\n          <Route\n            path=\"/welcome/:name\"\n            render={(props) => (\n              <Welcome {...props} name={props.match.params.name} />\n            )}\n          />\n          <Route path=\"/clock\" component={Clock} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/jeopardy\" component={Jeopardy} />\n          <Route component={NoMatch} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}